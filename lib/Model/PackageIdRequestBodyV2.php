<?php
/**
 * PackageIdRequestBodyV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Объявления
 *
 * API для получение статистики по объявлениям, применения дополнительных услуг, а также просмотр статусов объявлений  **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).**
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PackageIdRequestBodyV2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackageIdRequestBodyV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'packageIdRequestBodyV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'package_id' => 'package_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'package_id' => 'setPackageId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'package_id' => 'getPackageId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKAGE_ID_X2_1 = 'x2_1';
    const PACKAGE_ID_X2_7 = 'x2_7';
    const PACKAGE_ID_X5_1 = 'x5_1';
    const PACKAGE_ID_X5_7 = 'x5_7';
    const PACKAGE_ID_X10_1 = 'x10_1';
    const PACKAGE_ID_X10_7 = 'x10_7';
    const PACKAGE_ID_X15_1 = 'x15_1';
    const PACKAGE_ID_X15_7 = 'x15_7';
    const PACKAGE_ID_X20_1 = 'x20_1';
    const PACKAGE_ID_X20_7 = 'x20_7';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageIdAllowableValues()
    {
        return [
            self::PACKAGE_ID_X2_1
            self::PACKAGE_ID_X2_7
            self::PACKAGE_ID_X5_1
            self::PACKAGE_ID_X5_7
            self::PACKAGE_ID_X10_1
            self::PACKAGE_ID_X10_7
            self::PACKAGE_ID_X15_1
            self::PACKAGE_ID_X15_7
            self::PACKAGE_ID_X20_1
            self::PACKAGE_ID_X20_7
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['package_id'] === null) {
            $invalidProperties[] = "'package_id' can't be null";
        }
        $allowedValues = $this->getPackageIdAllowableValues();
        if (!is_null($this->container['package_id']) && !in_array($this->container['package_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets package_id
     *
     * @return string
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param string $package_id Идентификатор пакета услуг, возможные варианты значения: - `x2_1` - применение пакета До 2 раз больше просмотров на 1 день - `x2_7` - применение пакета До 2 раз больше просмотров на 7 дней - `x5_1` - применение пакета До 5 раз больше просмотров на 1 день - `x5_7` - применение пакета До 5 раз больше просмотров на 7 дней - `x10_1` - применение пакета До 10 раз больше просмотров на 1 день - `x10_7` - применение пакета До 10 раз больше просмотров на 7 дней  В некоторых регионах и категориях также доступны дополнительные варианты: - `x15_1` - применение пакета До 15 раз больше просмотров на 1 день - `x15_7` - применение пакета До 15 раз больше просмотров на 7 дней - `x20_1` - применение пакета До 20 раз больше просмотров на 1 день - `x20_7` - применение пакета До 20 раз больше просмотров на 7 дней  Если попытаться применить эти пакеты в недоступных для них регионе и категории, оплата не пройдёт.
     *
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $allowedValues = $this->getPackageIdAllowableValues();
        if (!in_array($package_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_id'] = $package_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
